
1.精灵图的优劣势
	优势：减少HTTP请求次数，减轻服务器的压力。
	劣势：制作、使用、修改都很麻烦。


2.项目常见的优化手段
	1)代码压缩
	2)图片压缩 webp   
	3)提取公共类样式
	4)<script>标签后置
	5)cdn加速
	减少服务器带宽压力


3.alt和title属性有什么不同？
	这两个属性就没有什么相同的
	title指的是鼠标移上之后的提示文字，alt是当资源加载失败时占位的文字。

4.Web语义化
	用合适的标签用在合适的位置
	好处：
		1.清晰
		2.当带宽不稳定时，如果样式表加载失败，那么网站还能呈现一个大体的结构。
		3.有利于SEO（搜索引擎优化）
			蜘蛛权重  1)日均IP和日均PV
					  2)keywords
					  3)标题标签

5.IE6  双边距  3PX    cssHack   *

6.@import   执行时机，兼容性.


7.HTML5兼容低版本浏览器  HTML5.JS


8.HTML5的新标签  section  header  footer  article  nav  main  time pre  code canvas

9.文档声明类型 <!doctype>
	告知浏览器以何种HTML版本来解析HTML代码

10.对Web标准有什么看法？
	如果没有一套标准，那么浏览器在实现内核的时候，每个浏览器都有自己的一套实现方法，因为标准的出现，所以所有的浏览器有了一个共识，比如设置元素的圆角大家都用border-radius来实现，这样开发者在写代码的时候不用考虑这个属性会在某些浏览器下不认识的情况。

11.对渐进增强和优雅降级有什么看法？
	这是二套开发的思维模式。
	优雅降级指的是在开发过程中面向的是最终的效果，在针对特定的低版本浏览器去实现一些妥协的方案。
	渐进增强指的是在开发过程中面向的是最低版本浏览器去实现基础效果，在逐步添加优化新的特性新的效果。
	我喜欢优雅降级

12.浏览器的内核分别是什么?

IE: trident内核
Firefox：gecko内核
Safari：webkit内核
Opera：以前是presto内核，Opera现已改用Google Chrome的Blink内核
Chrome：Blink(基于webkit，Google与Opera Software共同开发)

13.HTML与XHTML的区别
	XHTML是HTML的更严格版本，比如XHTML严格规定标签名必须小写，双标签必须闭合，而HTML则更灵活一些。

14.混杂模式和严格模式(DTD)的区别？如何进入混杂模式。
	区别：盒模型解析方法不同
	作用：兼容远古代码
	开启方式：不写文档声明类型

15.浏览器兼容性问题。
	IE6只是了解，没有兼容经验。

	IE8  鼠标事件的event对象没有pageX和pageY
	IE8  鼠标事件的event对象没有target，有srcElement

16.哪些属性可以继承？
	所有和文字相关的属性都可以继承.

17.优先级算法如何计算？
	
						
18.table布局

	table布局相比div布局,代码量更大，结构混乱不利用阅读和编写。
	table布局在二维数据的布局展现上特别合适。

19.谈谈你对HTML的理解。
	HTML是一种标准，它通过符号来表示要显示在页面中的各个部分，它属于网站项目中的结构层。

20.CSS怎么理解？
	CSS能够对网页中元素的设计排版进行精确控制

21.JAVASCRIPT怎么理解？
	它是一种事件驱动的脚本语言，它代表网站项目的行为层，可以响应用户的操作，也可以与服务端进行数据交互。 在服务端的JAVASCRIPT也可以编写服务端程序。

22.你怎么看待前端的？
	前端首先要将设计师的设计稿尽可能的百分百还原，设计并制作平滑合理的交互效果;与后端工程师配合，完成数据层的对接工作，当然这些都是比较基础的工作，我觉得前端开发工程师需要时刻完善优化打磨项目中各处和用户体验相关的交互行为。

23.谈谈你对用户体验的理解？
	1.平滑动画
	2.资源加载顺序
	3.交互设计   实在不知道聊啥就聊表单验证
		表单验证中的交互系列
			1)label 配合 表单元素的for属性用来扩展可点击区域
			2)实时反馈错误信息，onkeypress验证，不用onbulr甚至是onsubmit来验证
			3)文本框，文本域内的文字距离边缘要有留白。

24.谈一谈你对HTML5的理解。
	微观上的HTML5指的是：HTML的最新版本,HTML5，新标签和新属性。
	宏观上的HTML5指的是：HTML5 + CSS3 + ES6

25.localstorage,seesionstorage,cookie
	客户端存储技术，离线存储，与服务器无关。 

   localstorage对比cookie
   兼容性差，读取设置删除操作更方便，永久性存储，不可以灵活地设置声明周期。

   localstorage对比sessionstorage
   永久性存储和临时存储之间的区别


   seesionstorage对比cookie
   cookie生命周期灵活，session关闭就没了，cookie操作不方便。



26.跨页面通信
	1.get请求参数配合location.href通信
	2.seesionstorage通信

27.闭包
   闭包就函数里面套函数，从而达到在函数体外部访问函数体内部的局部变量。实现原理就是在函数体内部的函数可以访问到函数的局部变量，那么在外层函数里将该函数当做返回值返回，在全局作用域下调用外层函数并且接受返回值即内层函数就能达到从函数体外部访问函数体内部作用域的目的了。

28.addEventLinster与常规绑定事件区别
	1.add....是Node节点下的方法(EventType(不带on),事件句柄,响应阶段 true捕获阶段 false冒泡阶段)
	2.可以重复添加事件
	attchEvent()  兼容低版本IE的写法

29.谈谈你对事件委托/代理的理解。
	实现原理:是根据事件传播机制来将子元素的事件委托给父级元素，利用事件对象下的target属性确定目标元素。
	好处：1.如果子元素是动态生成的，那么后生成的节点也会存在事件。
		  2.因为绑定事件的过程只有一次，那么在极端情况下客户端性能比一般绑定事件的方式更好。
	问题：1.this指向的问题     2.事件对象下target属性的兼容问题  IE：event.srcElement
    
    阻止事件继续冒泡：event.stopPropagation()

30.谈谈你对事件传播机制，事件模型，事件流的理解。

31.谈谈你对函数节流
	本质：函数节流是指有些事件处理函数不可以在没有间断的情况下连续重复执行
	作用：节省客户端处理性能
	原理：当触发事件的时候，设置一个定时器，再触发事件的时候，如果定时器存在，就不执行；直到xx秒后，定时器执行执行函数，清空定时器，这样就可以设置下个定时器。

32.谈谈你对回流与重绘.
   所有和盒模型解析相关的和位置相关的属性再发生改变时，浏览器会进行一次重绘和回流，而当与盒模型或位置无关的属性发生改变时则只会发生重绘。当我操作页面DOM元素时，尽可能地减少回流操作，主要体现在将多条css操作生成一个class类型，在js发生某个事件时操作DOM元素的class类而非style属性。

33.内置对象与宿主对象的区别?
   对象能分为三种：自定义对象，本地对象，全局对象。

   
   本地对象：
   		-内置对象：Math.Global.
   		-宿主对象：window.document

   全局对象： Array、Boolean、Date、Function、Number、Object、RegExp、String以及各种错误类对象，包括Error、EvalError、RangeError、ReferenceError、SyntaxError和TypeError。

   自定义对象：由JS上下创建的对象 

   宿主对象是由浏览器提供的对象，在程序运行时，浏览器帮助我们创建了这么docuemnt与window这两个对象，而xxx对象是ECMAScript的核心语法，由Javascript提供，我们如果要使用这个对象，必须要先实例化这个对象。

34.JSONP的工作原理
	通过生成一个script标签向服务器发送一次GET请求，服务器端接受到请求之后，解析问号后面的参数，根据参数的不同，向客户端返回一段不同的js代码，这段代码是一段执行函数语句，将返回的数据放置在函数的参数里，客户端事先声明好这个函数，形参就代表了服务器端返回的数据，而这个函数名在一般情况下大家约定它是在客户端向服务器发送请求时随带的一个叫callback的参数的值。 

35.谈一谈你对Ajax的理解.
	Ajax实质上就是通过Javascript中的XMLHttpRequest对象操作HTTP协议，从而做到在不刷新页面的情况下向服务器端发送请求，然后利用实例化之后的对象中的responseText属性接受服务器端的返回数据。


36.说一说POST请求与GET请求之间的不同
	安全性：GET差，POST更好。因为GET走地址栏，POST走HTTP请求实体.
	数据长度限制:常规情况下GET请求总长度为2048个字符，POST HTTP协议不限制。
	对后退按钮/刷新的破坏性:GET不破坏按钮功能，POST会破坏。
 
37.谈一谈this这个关键字的理解。指针。
	1) 全局对象或者是一般函数中下指向window对象
	2) 对象中指向该对象本身
	3) 事件句柄/处理函数指向触发事件的Node节点
	4) 构造函数中指向实例化后的对象

38.new关键字都做了什么？
	1)new关键字后面都会紧跟一个构造函数。
	2)new关键字会执行该构造函数，并在函数执行开始时创建一个空对象。
	3)将构造函数体内this指向变为该对象
	4)将该对象return

39.谈谈你对构造函数的理解？
	构造函数就像是用来生产对象的一个模具。生产出来的对象，有些许不同，这些不同点，我们常常把它们当做参数，还有一些相同点，这些相同点我们常常把它们放到构造函数的原型对象内，这样实例化出来的对象就拥有了这些不变得属性或方法。

40.谈一谈你对原型prototype的理解/谈谈你对js中继承的理解。
    1.prototype，继承。
    2.扩展。

41.JSON数据的特性。
	类似于JS对象的数据结构，由若干条数据构成，每条数据库由键/值对构成。

42.清除浮动的几种方式？
	1.开启BFC(块级格式上下文）模式，其中overflow:hidden为最优解.
	2.父级元素的结束标签的前面添加一个空的div并对其设置clear:both属性;
	3.:after伪元素方式，display:block;content:" ";clear:both;

43.谈谈你对前端优化的理解？
	性能上的优化：
		1.减少HTTP请求次数 
			a)雪碧图
			b)合并同页面css与js文件
		2.CDN加速
		3.代码压缩
		4.script标签后置

44.谈谈jQuery CDN加速的好处。
类库加速，能在客户端与其他网站共享CDN静态文件的缓存，并且为用户智能分配最近物理服务器，而且还能分担主服务器磁盘与带宽压力。

45.谈谈你对BFC的理解。
	BFC (block formatting context)可以理解成是在页面里独自存在的一个容器，容器之内的元素布局不会影响容器之外元素的布局方式。有非常多种方式可以让元素进入BFC模式，比如……，一般我会使用BFC的特性解决高度坍塌与边距重合问题。


46.apply和call的区别？
	call和apply都是函数的方法，它们都可以执行一个函数并且改变本次执行函数中的
	this指向到apply和call方法的第一个参数。它们的不同点在于本次执行函数的实参的写法，aplly将实参集合作为第二个参数，而call则在第一个参数后逐个追加参数

47.简单概括jQuery的实现原理
	$,jQuery,
	$() type Object 到底是不是一个Node节点 NodeType  == 1  => jQuery
	$() String  看一下  <>  createElement => jQuery  querySelectorAll()  => jQuery
	$() function 调用类似于window.onload 方法

	jQuery   innerHTML => html()  value => val()  cloneNode() => clone()   insertAfter()

48.jQuery如何移除一个元素的事件。
	a.bind("click")	

49.你都知道哪些前端框架？
   三大框架,Bootstrap,zepto,jQuery,d3.js,highcharts,Echarts,ionic,phonegap,react Native

50.你所了解到的Web攻击技术。
	1.XSS(跨站脚本攻击)
	2.SQL注入
	3.CSRF(跨站点伪造)

51.一个Ajax建立的过程是怎样的？
	1.实例一个XMLHttpRequest对象
	2.使用open()方法创建一个Ajax请求 该方法接受3个参数，分别是请求方式，请求地址，同步或异步
	3.使用send()方法发送请求
	4.responseText接受请求

52.jQuery中delegate()方法有什么作用，以及会在什么情况下被使用到。
	内部实现原理就是事件委托。
	使用情况：参考事件委托

53.Restful API

54.转成JSON再转回来
	JSON.parse()  正解析  字符串形式的JSON => JSON对象
	JSON.stringify() 反解析  JSON对象  =>  字符串

55.线程与进程的区别。

56.undefined与null的区别
	undefined 空值   null 空对象 

57.3种强制类型转换和两种隐式类型转换。
	boolean true -> Number 1
	boolean false -> number 0
	String "abc" -> Boolean true
	String "" -> false

	if() 
	== 比较特殊的情况
		1)当Boolean 比较 其他的时候  先将Boolean => Number
		2)undefined == false   => false
		3)null == false => false
		4)undefined == undefined => true
		5)null == null  => true

jingjie








